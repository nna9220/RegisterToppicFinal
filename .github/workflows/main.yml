name: CI/CD Pipeline
on:
  workflow_dispatch:
  # this will trigger workflow whenever a change is pushed to main branch
  push:
    branches:
      - master
jobs:
  build:
    name: Build Archive
    #Will run steps on latest version of ubuntu
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
     
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload JAR
        # We upload so we can re-use same jar in next job.
        uses: actions/upload-artifact@v2
        with:
          #Name of artifact can be anything
          name: artifact
          #Relative path to jar file
          path: target/QuanLyNhaXe-0.0.1-SNAPSHOT.jar
  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to Elastic Beanstalk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download JAR
        #Download the artifact which was uploaded in the Build Archive's job
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: Transfer JAR to intermediary server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: khunggg-0.0.1-SNAPSHOT.jar
          target: ${{ secrets.DEPLOY_DIR }}

      - name: Set up SSH
        run: |
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Deploy to Elastic Beanstalk
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'cd ${{ secrets.DEPLOY_DIR }} && ~/.local/bin/eb init && ~/.local/bin/eb deploy -v --env ${{ secrets.EB_ENV_NAME }}'
